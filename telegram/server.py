"""–°–µ—Ä–≤–µ—Ä Telegram –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ"""
import logging
from aiogram import Bot, Dispatcher, executor, types
import markup
from telebot import types
import exceptions
import expenses
from categories import Categories


logging.basicConfig(level=logging.INFO)

API_TOKEN = "5366559478:AAFg40_LRnitgrRxSn2olbkGmSoB9LaYsao"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""

    await message.answer(
        "–ë–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥: 10 —Ç–∞–∫—Å–∏\n")
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç {0.first_name}'.format(message.from_user), reply_markup=markup.mainMenu)






@dp.message_handler(lambda message: message.text.startswith('/del'))
async def del_expense(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
    row_id = int(message.text[4:])
    expenses.delete_expense(row_id)
    answer_message = "–£–¥–∞–ª–∏–ª"
    await message.answer(answer_message)


@dp.message_handler(text=['üßæ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç'])
async def categories_list(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    categories = Categories().get_all_categories()
    answer_message = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:\n\n* " +\
            ("\n* ".join([c.name+' ('+", ".join(c.aliases)+')' for c in categories]))
    await message.answer(answer_message)


@dp.message_handler(text=['üìà –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
async def today_statistics(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç"""
    answer_message = expenses.get_today_statistics()
    await message.answer(answer_message)



@dp.message_handler(text=['üóì –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü'])
async def month_statistics(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    answer_message = expenses.get_month_statistics()
    await message.answer(answer_message)


@dp.message_handler(text=['üñä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'])
async def list_expenses(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
    last_expenses = expenses.last()
    if not last_expenses:
        await message.answer("–†–∞—Å—Ö–æ–¥—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã")
        return

    last_expenses_rows = [
        f"{expense.amount} —Ä—É–±. –Ω–∞ {expense.category_name} ‚Äî –Ω–∞–∂–º–∏ "
        f"/del{expense.id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        for expense in last_expenses]
    answer_message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã:\n\n* " + "\n\n* "\
            .join(last_expenses_rows)
    await message.answer(answer_message)


@dp.message_handler()
async def add_expense(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥"""
    try:
        expense = expenses.add_expense(message.text) # –≤—ã–∑–æ–≤ –º–æ–¥—É–ª—è expenses (—Ä–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç)
    except exceptions.NotCorrectMessage as e: # –≤ exceptions.py –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        await message.answer(str(e))
        return
    answer_message = (
        f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞—Ç—ã {expense.amount} —Ä—É–± –Ω–∞ {expense.category_name}.\n\n"
        f"{expenses.get_today_statistics()}")
    await message.answer(answer_message)

@dp.message_handler(content_types=['üìà –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞','üóì –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü','üñä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã','üßæ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç'])
def bot_massege(message):
    if message.chat_type == 'private':
        if message.text == 'üìà –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            bot.send_message(message.chat_type, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: ' + today_statistics())
    elif message.text == 'üóì –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü':
        bot.send_message(message.chat_type, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: ' + month_statistics())
    elif message.text == 'üñä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã':
        bot.send_message(message.chat_type, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: ' + list_expenses())
    elif message.text == 'üßæ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç':
        bot.send_message(message.chat_type, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: ' + categories_list())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
